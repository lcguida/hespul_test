continue
cotinue
contiue
next
last_reading
next
meter
date
exit
continue
date
continue
date
continue
date
continue
date
meter
exit
continue
next
meter.readings
meter.readinds
meter
meter.last_reading
meter
exit
rr.errors
rr
exit
MeterReading.find_by_date(Date.new(2016,02,02))
MeterReading.all
next
last_reading_value
next
date
continue
next
reading_at_date
next
exit
continue
next
reading_at_date
next
date
exit
continue
exit
continue
meters.count
meters
next
last_reading
next
last_reading
next
meter
production_until_date
next
production_until_date
next
meter.reading_at_or_before(date)
meter
continue
meter.readings
meter.first_reading
last_reading
initial_reading
meter
continue
contiue
meters_until_date.count
meters_until_date
continue
meters
meters_until_date
exit
continue
contnue
Meter.all
continue
exit
continue
previous_production
next
previous_production
production
continue
contiue
production
exit
continue
previous_production
production
continue
previous_production
production
continue
active_meter
continue
active_meter
continue
active_meter
continue
contiue
active_meter
continue
active_meter
active_meter.reload
active_meter
continue
active_meter
continue
assert old_meter.valid?
continue
active_meter.updated_at
active_meter.last_update
active_meter.errors.any?
continue
continnue
active_meter.errors.any?
assert
active_meter.errors.any?
active_meter.errors
continue
active_meter.uninstall
continue
active_meter
continue
next
continue
@site.active_meter
next
Site.first.active_meter
Site.first.meters.create(meter_params)
meter_params
next
meter_params[:installation_date].class
meter_params[:installation_date]
meter_params[:installation_date
meter_params
continue
@site.active_meter
@site.meters.create({installation_date: Date.today, active: true})
@site.active_meter
@site.meters.active_meter
@site.meters
next
meters.create(meter_params)
a.valid?
a = site = Site.first.meters.build({installation_date: Date.today, active: false})
site = Site.first.meters.build({installation_date: Date.today, active: false})
site = Site.first
Meter.create(meter_params)
meter_params
next
meter_params
continue
@another_reading.attributes
@another_meter.attributes
@meter_reading.attributes
continue
MeterReading.all
date
MeterReading.where(date: date)
date
meter.readings.where(date: date)
meter.readings
meter.readins
continue
conitue
@another_reading.date_must_be_uniq_for_each_meter
@another_reading.valid?
continue
puts "lalala" if meter.try(:readings);return
puts "lalala" if meter.try(:readings);reutnr
puts "lalala" if meter.try(:readings)end;
puts "lalala" if meter.try(:readings);
puts "lalala" if meter.try(:readings)
puts "lalala' if meter.try(:readings)
meter.try(:readings) == true
meter.readings == true
meter.readings
next
continue
MeterReading.all
MeterReaing.all
@another_reading.valid?
@meter_reading.date
@another_reading.date
MeterReading.column_names
@another_reading.installation_date
continue
active_meter.errors
active_meter.uninstall
active_meter
continue
Meter.all
next
continue
Meter.all
next
continue
Meter.all
next
meter_params
continue
@meter_reading.valid?
@meter_reading.date
@meter_reading.date_was
next
continue
@meter_reading.send(:date, Date.today)
@meter_reading.source = 0
@meter_reading.source
@meter_reading.source = 2
@meter_reading.source
@meter_reading.source = 0
@meter_reading.source
@meter_reading.send(:source, 0)
@meter_reading.send(:source)
continue
@meter.installation_date
@meter_reading.errors
@meter_reading.valid?
@meter_reading
continue
value
meter.last_reading.value
meter.last_reading
meter.readings.any?
meter.readings
meter
